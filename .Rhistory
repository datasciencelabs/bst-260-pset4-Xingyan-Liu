dir <- system.file(package = "dslabs")
file_path <- file.path(dir, "extdata/murders.csv")
file_path
file.copy(file_path, "murders.csv")
path <- system.file("extdata", package = "dslabs")
files <- list.files(path)
files
x <- read.table("murders.csv", sep = ",")
View(x)
x <- read.table("murders.csv", sep = ",", header = TRUE)
View(x)
x <- read.csv("murders.csv")
library(data.table)
x <- fread("murders.csv")
View(x)
dir <- system.file(package = "dslabs")
file_path <- file.path(dir, "extdata/murders.csv")
file.copy(file_path, "murders.csv")
library(data.table)
x <- fread("murders.csv")
View(x)
typeof(x)
class(x)
now()
library(lubridate)
now()
day(st)
library(data.table)
st <- as.Date("2024-03-04")
day(st)
#> [1] 4
mday(st)
#> [1] 4
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
source("census-key.R")
| message: false
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
source("census-key.R")
response <- request |> req_perform()
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
source("census-key.R")
source("census-key.R")
source("census-key.R")
#source("census-key.R")
print(census_key) # Should display your key
census_key <- "A_CENSUS_KEY_THAT_WORKS"
source("census-key.R")
source("census-key.R")
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
print(request)
View(request)
response <- request |> req_perform()
resp_status(response)
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
#print(request)
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- resp_body_json(response)
population <- resp_body_html(response)
View(population)
population <- resp_body_html(response)
print(population)
View(request)
request[["url"]]
https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=YOURKEYHERE
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
#print(request)
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
print(census_key)         # Check your key
print(request)            # Inspect the request
print(resp_status(response)) # Check if the request succeeds
cat(resp_body_string(response)) # See the error message if any
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
#print(request)
View(request)
request[["url"]]
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- resp_body_json(response)
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
#print(request)
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- resp_body_json(response)
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE)) |>
slice_max(total_deaths, n = 10) |>
mutate(state = fct_reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col(fill = "steelblue") +
labs(x = "Total Deaths",
y = "State",
title = "Top 10 States by COVID-19 Deaths")
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
print(request)
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- matrix(unlist(resp_body_json(response)), ncol = 4, byrow = TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
#population <- population |> ## Use janitor row to names function
# convert to tibble
# remove stat column
# rename state column to state_name
# use pivot_longer to tidy
# remove POP_ from year
# parese all relevant colunns to numeric
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
population <- population |>
row_to_names(row_number = 1) |>  # Use janitor to make first row headers
as_tibble() |>  # convert to tibble
select(-state) |>  # remove state ID column
rename(state_name = NAME) |>  # rename NAME column to state_name
pivot_longer(cols = starts_with("POP_"),  # use pivot_longer to tidy
names_to = "year",
values_to = "population") |>
mutate(year = str_remove(year, "POP_"),  # remove POP_ from year
year = as.numeric(year),  # parse year to numeric
population = as.numeric(population)) |>  # parse population to numeric
mutate(state = case_when(  # add state abbreviations
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
))
head(population)
# population |>
# reorder state
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
population |>
mutate(state_name = reorder(state_name, population)) |> # reorder state
ggplot(aes(x = state_name, y = population)) + # assign aesthetic mapping
geom_col() + # use geom_col to plot barplot
coord_flip() + # flip coordinates
facet_wrap(~year) + # facet by year
labs(
x = "State",
y = "Population",
title = "State Populations by Year"
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
# regions <- use jsonlit JSON parser
# regions <- convert list to data frame. You can use map_df in purrr package
regions <- fromJSON(url) |>
unnest_longer(states) |>
mutate(region_name = case_when(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~ "NY/NJ/PR/VI",
TRUE ~ region_name   # keep all others unchanged
)) |>
filter(states %in% state.name |
states == "District of Columbia" |
states == "Puerto Rico")
population <- population |> left_join(regions, by = c("state_name" = "states"))
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
cases <- cases_raw |>
select(state, date = end_date, cases = new_cases) |>
mutate(
cases = as.numeric(cases),
date = as.Date(date)
)
cases |>
mutate(year = year(date)) |>
filter(year %in% c(2020, 2021)) |>
left_join(
population |>
filter(year %in% c(2020, 2021)) |>
select(state, state_name, region_name, year, population),
by = c("state", "year")
) |>
mutate(cases_per_100k = cases / population * 100000) |>
filter(!is.na(cases_per_100k), !is.na(date)) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name, scales = "fixed") +   # shared y-axis
labs(
x = "Date",
y = "Cases per 100,000",
color = "State",
title = "COVID-19 Cases per 100,000 by State and Region (2020-2021)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
library(lubridate)
library(knitr)
cases |>
mutate(date = ymd(date)) |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date),
month = month(date, label = TRUE, abbr = FALSE)) |>
group_by(year, month) |>
summarize(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable()
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
)
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE)) |>
slice_max(total_deaths, n = 10) |>
mutate(state = fct_reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col(fill = "steelblue") +
labs(x = "Total Deaths",
y = "State",
title = "Top 10 States by COVID-19 Deaths")
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key
)
print(request)
response <- request |> req_perform()
resp_status(response)
resp_content_type(response)
population <- matrix(unlist(resp_body_json(response)), ncol = 4, byrow = TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
#population <- population |> ## Use janitor row to names function
# convert to tibble
# remove stat column
# rename state column to state_name
# use pivot_longer to tidy
# remove POP_ from year
# parese all relevant colunns to numeric
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
population <- population |>
row_to_names(row_number = 1) |>  # Use janitor to make first row headers
as_tibble() |>  # convert to tibble
select(-state) |>  # remove state ID column
rename(state_name = NAME) |>  # rename NAME column to state_name
pivot_longer(cols = starts_with("POP_"),  # use pivot_longer to tidy
names_to = "year",
values_to = "population") |>
mutate(year = str_remove(year, "POP_"),  # remove POP_ from year
year = as.numeric(year),  # parse year to numeric
population = as.numeric(population)) |>  # parse population to numeric
mutate(state = case_when(  # add state abbreviations
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
))
head(population)
# population |>
# reorder state
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
population |>
mutate(state_name = reorder(state_name, population)) |> # reorder state
ggplot(aes(x = state_name, y = population)) + # assign aesthetic mapping
geom_col() + # use geom_col to plot barplot
coord_flip() + # flip coordinates
facet_wrap(~year) + # facet by year
labs(
x = "State",
y = "Population",
title = "State Populations by Year"
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
# regions <- use jsonlit JSON parser
# regions <- convert list to data frame. You can use map_df in purrr package
regions <- fromJSON(url) |>
unnest_longer(states) |>
mutate(region_name = case_when(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~ "NY/NJ/PR/VI",
TRUE ~ region_name   # keep all others unchanged
)) |>
filter(states %in% state.name |
states == "District of Columbia" |
states == "Puerto Rico")
population <- population |> left_join(regions, by = c("state_name" = "states"))
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
cases <- cases_raw |>
select(state, date = end_date, cases = new_cases) |>
mutate(
cases = as.numeric(cases),
date = as.Date(date)
)
head(cases)
View(deaths)
cali<-deaths |>
filter(state = California)
cali<-deaths |> filter(state == California)
View(deaths)
cali<-deaths |> filter(state = "California")
cali<-deaths |> filter(state == "California")
View(cali)
